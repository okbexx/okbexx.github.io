<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>真的会爱上你</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://okbexx.github.io/"/>
  <updated>2018-06-18T04:38:59.171Z</updated>
  <id>https://okbexx.github.io/</id>
  
  <author>
    <name>Jarl Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在VPS中利用vlmcsd搭建KMS激活服务器</title>
    <link href="https://okbexx.github.io/2018/06/18/%E5%9C%A8VPS%E4%B8%AD%E5%88%A9%E7%94%A8vlmcsd%E6%90%AD%E5%BB%BAKMS%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://okbexx.github.io/2018/06/18/在VPS中利用vlmcsd搭建KMS激活服务器/</id>
    <published>2018-06-18T04:38:22.000Z</published>
    <updated>2018-06-18T04:38:59.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如今我们经常会使用 KMS 对我们的 Windows/Office 进行激活，不过市面上流通着不少良莠不齐的 KMS 激活软件。其实，我们完全可以利用手中的闲置 VPS 资源，利用 vlmcsd 搭建KMS 激活服务器。声明仅 VOL 版本的 Windows/Office 支持此 KMS 激活，请先确认自己安装的非 Retail 零售版。</p></blockquote><h3 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h3><p>首先需要一台 VPS，在上面搭建 vlmcsd 服务端</p><ol><li>下载最新版，查看最新版本 <a href="https://github.com/Wind4/vlmcsd/releases" target="_blank" rel="noopener">github地址</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Wind4/vlmcsd/releases/download/svn1111/binaries.tar.gz</span><br></pre></td></tr></table></figure><ol><li>解压并查看</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf binaries.tar.gz</span><br><span class="line">cd binaries/Linux/intel/static/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><ol><li><p>挑选适合自己系统的版本，我们能看到适配各个系统的版本，vlmcsd-x64-musl-static 或vlmcsd-x86-musl-static（根据你 VPS 的系统为 x86 或 x64 系统而定）。</p><p> 接着以 x64 为例子：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x vlmcsd-x64-musl-static</span><br><span class="line">./vlmcsd-x64-musl-static</span><br></pre></td></tr></table></figure><p>​    至此，已经部署完毕</p><ol><li><p>如果你的 VPS 开启了 iptables ，记得开启 1688 端口的 tcp 传输：</p><figure class="highlight plain"><figcaption><span>-I INPUT 5 -p tcp -m state --state NEW -m tcp --dport 1688 -j ACCEPT ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 开机自启</span><br></pre></td></tr></table></figure><p> vi /etc/rc.local<br> cd ~/binaries/Linux/intel/static/ &amp;&amp; ./vlmcsd-x64-musl-static</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### 本地测试</span><br><span class="line">本地测试这里仅以本地为 Windows 环境为例</span><br><span class="line"></span><br><span class="line">1. 下载 https://github.com/Wind4/vlmcsd/releases ，并解压</span><br><span class="line"></span><br><span class="line">2. 进入\binaries\Windows\intel 目录，开启 PowerShell 或者其他终端</span><br><span class="line"></span><br><span class="line">3. 根据你本地的 Windows 为 x86 或 x64，输入如下命令：</span><br></pre></td></tr></table></figure><p>./vlmcs-Windows-x86.exe -v -l 3 你的VPS的IP或者绑定的域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">或</span><br></pre></td></tr></table></figure><p>./vlmcs-Windows-x64.exe -v -l 3 你的VPS的IP或者绑定的域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">​       其中 -l 3表示发送 Windows 10 Enterprise 2016 LTSB 的激活请求，具体版本对应列表可以通过 ./vlmcs-Windows-x64.exe -x 查看</span><br><span class="line"></span><br><span class="line">​       如果显示如下，那么就搭建成功了</span><br><span class="line"></span><br><span class="line">![kms.png](https://i.loli.net/2018/06/18/5b268a17629be.png)</span><br><span class="line"></span><br><span class="line">### 激活</span><br><span class="line">* 激活 Windows</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    以管理员身份打开命令提示符，然执行下列命令：</span><br></pre></td></tr></table></figure><p> cd /d “%SystemRoot%\system32”<br> slmgr /skms 你的VPS的IP或者绑定的域名<br> slmgr /ato<br> slmgr /xpr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">![win.png](https://i.loli.net/2018/06/18/5b268a73549c1.png)</span><br><span class="line">* 激活 Office</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    以管理员身份打开命令提示符，进入软件安装目录，然后执行下列命令：</span><br><span class="line"></span><br><span class="line">    这里以 Office 2013 为例：</span><br><span class="line"></span><br><span class="line">    进入32位版本安装目录：``` cd /d &quot;%ProgramFiles(x86)%\Microsoft Office\Office15</span><br></pre></td></tr></table></figure><p> 进入64位版本安装目录：<figure class="highlight plain"><figcaption><span>/d "%ProgramFiles%\Microsoft Office\Office15 ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后执行下列命令</span><br></pre></td></tr></table></figure></p><p> cscript ospp.vbs /sethst:你的VPS的IP或者绑定的域名<br> cscript ospp.vbs /act<br> cscript ospp.vbs /dstatus</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">### 题外话</span><br><span class="line">​Windows VOL 版本可以从 [http://msdn.itellyou.cn/](http://msdn.itellyou.cn/) 这里下载</span><br><span class="line"></span><br><span class="line">​Office VOL 版本可以从 [https://landian.la/click/OfficeToolPlus.html](https://landian.la/click/OfficeToolPlus.html) 这里下载</span><br><span class="line"></span><br><span class="line">​VOL 版本的镜像一般内置 GVLK key，用于 KMS 激活。如果你   手动输过其他 key，那么这个内置的 key 就会被替换掉，这个时候如果你想用 KMS，那么就需要把 GVLK key 输回去。首先，</span><br><span class="line">到 [](https://technet.microsoft.com/en-us/library/jj612867.aspx) 获取你对应版本的 key</span><br><span class="line"></span><br><span class="line">​如果不知道自己的系统是什么版本，可以运行以下命令查看系统版本：</span><br></pre></td></tr></table></figure><p>wmic os get caption</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到对应key之后，使用管理员权限运行cmd执行安装key：</span><br></pre></td></tr></table></figure><p>slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx<br>```<br>​    然后跟上面说的一样设置 KMS 服务器地址，激活。</p></li></ol><p>KMS 方式激活的有效期只有180天，每隔一段时间系统会自动请求 KMS 服务器续期，只要你的服务器正常，续期就没问题<br>参考：</p><p><a href="https://luodaoyi.com/kms.html" target="_blank" rel="noopener">https://luodaoyi.com/kms.html</a><br><a href="https://yorkchou.com/vlmcsd.html" target="_blank" rel="noopener">https://yorkchou.com/vlmcsd.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如今我们经常会使用 KMS 对我们的 Windows/Office 进行激活，不过市面上流通着不少良莠不齐的 KMS 激活软件。其实，我们完全可以利用手中的闲置 VPS 资源，利用 vlmcsd 搭建KMS 激活服务器。声明仅 VOL 版本的 Wi
      
    
    </summary>
    
      <category term="dev" scheme="https://okbexx.github.io/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建 IDEA license server 服务器</title>
    <link href="https://okbexx.github.io/2018/05/29/%E6%90%AD%E5%BB%BA%20IDEA%20license%20server%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://okbexx.github.io/2018/05/29/搭建 IDEA license server服务器/</id>
    <published>2018-05-29T14:08:22.000Z</published>
    <updated>2018-06-08T14:15:27.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>若资金允许，请点击 <a href="https://www.jetbrains.com/idea/buy/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/buy/</a> 购买正版</p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ul><li><p>方法一：使用 nginx 反代</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /idea/ &#123;</span><br><span class="line">        proxy_pass http://idea.lanyus.com/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后使用 <a href="https://yourdomain.com/idea/" target="_blank" rel="noopener">https://yourdomain.com/idea/</a> 即可</p></li><li><p>方法二：使用反代软件</p><p>  项目地址 ： <a href="https://github.com/ilanyu/ReverseProxy" target="_blank" rel="noopener">https://github.com/ilanyu/ReverseProxy</a></p><p>  下载对应系统的二进制文件，下面以 linux-amd64 为例</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ilanyu/ReverseProxy/releases/download/v1.2/ReverseProxy_linux_amd64</span><br><span class="line">chmod a+x ReverseProxy_linux_amd64</span><br><span class="line">./ReverseProxy_linux_amd64 -l &quot;0.0.0.0:8888&quot; -r http://idea.lanyus.com/</span><br></pre></td></tr></table></figure><p>  然后使用 <a href="http://yourdomain.com:8888" target="_blank" rel="noopener">http://yourdomain.com:8888</a> 即可</p></li><li><p>方法三：使用破解补丁</p><p>  <a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></p></li></ul><h3 id="激活网址"><a href="#激活网址" class="headerlink" title="激活网址"></a>激活网址</h3><p>上面地址失效了可以换个试试</p><p><a href="http://xidea.online/" target="_blank" rel="noopener">http://xidea.online/</a><br><a href="http://idea.singee77.com/" target="_blank" rel="noopener">http://idea.singee77.com/</a><br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;若资金允许，请点击 &lt;a href=&quot;https://www.jetbrains.com/idea/buy/&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="dev" scheme="https://okbexx.github.io/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>被人忽视的DOM API</title>
    <link href="https://okbexx.github.io/2018/05/15/%E8%A2%AB%E4%BA%BA%E5%BF%BD%E8%A7%86%E7%9A%84DOM%20API/"/>
    <id>https://okbexx.github.io/2018/05/15/被人忽视的DOM API/</id>
    <published>2018-05-15T12:08:22.000Z</published>
    <updated>2018-05-31T07:19:03.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自从用上了框架，就很少直接控制dom的行为，但万变不离其宗，现在重新好好认识一下这个小伙伴。</p></blockquote><p>###node、document 和 element<br>在学习 dom api 时对这三者还是挺混乱的。理一下他们之间的关系。</p><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>node 是一个接口，像 document 和 element 都是继承这个接口的。这个接口提供了 dom 节点的获取和操作方法。<br>node 有许多类型，下图列出了一些 node 的类型码。由图可见 element 的类型码为 1，文本节点类型码为 3，注释节点类型码为 8，document 的类型码为 9。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/05/31/5b0f995aad824.png" alt="node_type" title="">                </div>                <div class="image-caption">node_type</div>            </figure><p>这让我想到了 vue.js 中出现多次的代码：if (child.nodeType === 3) { … } 其实就是判断当前节点是否为文本节点。</p><h4 id="element"><a href="#element" class="headerlink" title="element"></a>element</h4><p>从上面的内容可知，element 就是一个特殊的 node（nodeType == 1），其实 element 就是 HTML 各类标签，如</p><p>这类有特殊含义的，能够携带一些特殊属性的节点。所以说 element 可以用 node 的所有 api。<br>document<br>同理，document 也是一个特殊的 node，它与 element 的不同之处在于 document 通常是 DOM 节点，即包含有 head 和 body 元素的一个 node。</p><p>参考：Difference between Node object and Element object? - Stack Overflow</p><h4 id="api-学习"><a href="#api-学习" class="headerlink" title="api 学习"></a>api 学习</h4><p>首先我发现一点：所有 dom 操作的起点都是使用 document 去获取各种类型的 node （集合）然后再去执行各类 dom 操作的行为！<br>由于 document 操作的 api 真的很多，所以我选取我想了解的部分学习了。在这里我学习 DOM API 的目的是：</p><p>学习 document 对象操作 dom 的方式，拥有脱离框架（jquery、vue等）来操作 dom 的能力。</p><h4 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h4><ul><li>Document.documentElement 返回 document 的直属后代元素。</li><li>Document.activeElement 返回当前正在操作的元素</li><li>Document.body 返回当前文档的<code>&lt;body&gt;</code>元素。与此类似的还有 Document.head 和Document.scripts 两个属性返回当前文档的 <code>&lt;head&gt;</code> 和 <code>&lt;script&gt;</code> 元素。</li><li>Document.getElementByClassName() 返回有给定样式名的元素列表</li><li>Document.getElementByTagName() 返回有给定标签名的元素列表</li><li>document.getElementById() 返回一个对识别元素的对象引用</li><li>document.querySelector() 返回文档中第一个匹配指定选择器的元素</li><li>document.querySelectorAll() 返回一个匹配指定选择器的元素节点列表</li><li>Node.childNodes 返回一个包含了该节点所有子节点的实时的 NodeList 是“实时的”意思是，如果该节点的子节点发生了变化，NodeList 对象就会自动更新。</li><li>Node.firstChild &amp; Node.lastChild 返回该节点的第一个子节点或最后一个子节点，如果该节点没有子节点则返回 null。</li><li>Node.previousSibling &amp; Node.nextSibling 返回与该节点同级的上一个或下一个节点，如果没有返回null。</li><li>Node.ownerDocument 返回这个元素属于的 Document 对象 。</li><li>Node.parentNode 返回一个当前结点 Node 的父节点 。</li><li>Node.parentElement 返回一个当前节点的父节点 Element。</li></ul><h4 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h4><ul><li>Document.createDocumentFragment() 创建一个新的文档片段</li><li>Document.createComment() 创建一个新的注释节点并返回它</li><li>Document.createElement() 用给定的标签名创建一个新的元素。</li><li>Document.createTextNode() 创建一个文字节点</li><li>Document.write() 向文档中写入内容（与之有类似功能的是 Document.writeln() 不同之处在于后面多了个换行符。）</li><li>Element.innerHTML 设置或返回元素的内容</li><li>Node.textContent 获取或设置一个标签内所有子结点及其后代的文本内容。</li><li>Node.appendChild() 向元素添加新的子节点，作为最后一个子节点。</li><li>Node.cloneNode() 克隆元素（方法中传参为deep，如果deep为true则深拷贝。）<br>Node.insertBefore() 在指定已有节点前插入新节点（没有 insertAfter 方法。可以使用 insertBefore 方法和 nextSibling 来模拟它。）</li><li>Node.normalize() 合并元素中相邻文本节点</li><li>Node.removeChild() 从元素中移除子节点</li><li>Node.replaceChild() 替换元素中的子节点<br>其中 Document 的 createXXX 方法还有一些其他不常用的，如需使用请查阅 MDN。</li></ul><h4 id="其他常用属性和方法"><a href="#其他常用属性和方法" class="headerlink" title="其他常用属性和方法"></a>其他常用属性和方法</h4><ul><li>Element.classList 返回元素的 class 集合。</li><li>EventTaget.addEventListener() 注册监听事件</li><li>Node.nodeType 返回该节点的类型码</li><li>Node.nodeValue 返回或设置当前节点的值。</li><li>Node.compareDocumentPosition() 比较当前节点与任意文档中的另一个节点的位置关系。</li><li>Node.contains() 传入的节点是否为该节点的后代节点。</li><li>Node.hasChildNodes() 是否拥有子节点</li><li>Node.isEqualNode() 检查两个元素是否相等</li><li>Node.isSameNode() 检查两个元素是否为相同的节点</li></ul><p>以上内容均参考了 MDN 上的内容：</p><ul><li>Node <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Node</a></li><li>Element <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Element</a></li><li>Document <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document</a></li></ul><h4 id="写个操作-DOM-的例子"><a href="#写个操作-DOM-的例子" class="headerlink" title="写个操作 DOM 的例子"></a>写个操作 DOM 的例子</h4><p>接下来就使用这些 API 来进行一些 DOM操作。</p><p>获取各个位置的节点。<br>这里写了个小demo：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>get dom<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world 1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world 2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world 3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world 4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world 5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>commit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var container = document.getElementById('container')</span></span><br><span class="line"><span class="undefined">    console.log('列出所有node', container.childNodes)</span></span><br><span class="line"><span class="undefined">    var h1 = document.getElementsByTagName('h1')[0]</span></span><br><span class="line"><span class="undefined">    console.log('获取h1后的元素', h1.nextSibling)</span></span><br><span class="line"><span class="undefined">    var uldiv = container.firstChild</span></span><br><span class="line"><span class="undefined">    while (uldiv &amp;&amp; uldiv.nodeType != 1) &#123;</span></span><br><span class="line"><span class="undefined">        uldiv = uldiv.nextSibling</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    var ul = uldiv.lastChild</span></span><br><span class="line"><span class="undefined">    while (ul &amp;&amp; ul.nodeType == 3) &#123;</span></span><br><span class="line"><span class="undefined">        ul = ul.previousSibling</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    console.log('获取ul中第一个元素内容', ul.firstChild)</span></span><br><span class="line"><span class="undefined">    var doc = h1.ownerDocument</span></span><br><span class="line"><span class="undefined">    console.log('获取当前 Document 对象', doc)</span></span><br><span class="line"><span class="undefined">    var li1 = ul.firstChild</span></span><br><span class="line"><span class="undefined">    console.log('获取li的父级节点', li1.parentElement)</span></span><br><span class="line"><span class="undefined">    var button = document.getElementsByTagName("button")[0]</span></span><br><span class="line"><span class="undefined">    button.onclick = log</span></span><br><span class="line"><span class="undefined">    button.focus()</span></span><br><span class="line"><span class="undefined">    button.click()</span></span><br><span class="line"><span class="undefined">    console.log('获取正在操作的元素', document.activeElement)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function log()&#123;</span></span><br><span class="line"><span class="undefined">        console.log('button is clicked')</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于在 chrome 中空格、换行算是文本节点。所以获取最后元素的时候总是会获取到那些文本节点上去。这个要注意的。所以我在代码中使用 nodeType == 1 来区分是否为元素。<br>在上面例子中查找了各种关系的元素，解决日常元素获取问题应该不难了。</p><p>实践创建node、插入node和删除node。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>Hello Child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttonGroup"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 父节点向子节点插入元素</span></span><br><span class="line"><span class="undefined">    function appendChild()&#123;</span></span><br><span class="line"><span class="undefined">        var container = document.getElementById("container")</span></span><br><span class="line"><span class="undefined">        var text = document.createElement("h2")</span></span><br><span class="line"><span class="undefined">        text.textContent = 'Hello New Child'</span></span><br><span class="line"><span class="undefined">        container.appendChild(text)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // 子节点获取父节点，在父节点后插入元素</span></span><br><span class="line"><span class="undefined">    function appendParent()&#123;</span></span><br><span class="line"><span class="undefined">        var child = document.getElementById('child')</span></span><br><span class="line"><span class="undefined">        var parent = child.parentElement</span></span><br><span class="line"><span class="undefined">        var text = document.createElement("h1")</span></span><br><span class="line"><span class="undefined">        text.textContent = 'Hello Parent'</span></span><br><span class="line"><span class="undefined">        var root = parent.parentElement</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        root.insertBefore(text, parent.nextSibling)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // 在当前元素前插入元素</span></span><br><span class="line"><span class="undefined">    function appendPre()&#123;</span></span><br><span class="line"><span class="undefined">        var child = document.getElementById('child')</span></span><br><span class="line"><span class="undefined">        var text = document.createElement("h2")</span></span><br><span class="line"><span class="undefined">        text.textContent = 'Hello Pre Child'</span></span><br><span class="line"><span class="undefined">        child.parentElement.insertBefore(text, child)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // 在当前元素后插入元素</span></span><br><span class="line"><span class="undefined">    function appendNext()&#123;</span></span><br><span class="line"><span class="undefined">        var child = document.getElementById('child')</span></span><br><span class="line"><span class="undefined">        var text = document.createElement("h2")</span></span><br><span class="line"><span class="undefined">        text.textContent = 'Hello Next Child'</span></span><br><span class="line"><span class="undefined">        child.parentElement.insertBefore(text, child.nextSibling)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // 移除父元素中最后一个子元素</span></span><br><span class="line"><span class="undefined">    function removeEle()&#123;</span></span><br><span class="line"><span class="undefined">        var container = document.getElementById('container')</span></span><br><span class="line"><span class="undefined">        if (container.lastChild) &#123;</span></span><br><span class="line"><span class="undefined">            container.removeChild(container.lastChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // 替换父元素中的子元素</span></span><br><span class="line"><span class="undefined">    function replaceEle()&#123;</span></span><br><span class="line"><span class="undefined">        var child = document.getElementById("child")</span></span><br><span class="line"><span class="undefined">        var newNode = document.createElement('div')</span></span><br><span class="line"><span class="xml">        newNode.innerHTML = "<span class="tag">&lt;<span class="name">button</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span>hello new node replaced"</span></span><br><span class="line"><span class="undefined">        var parent = child.parentElement</span></span><br><span class="line"><span class="undefined">        parent.replaceChild(newNode, child)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    // 创建按钮组</span></span><br><span class="line"><span class="undefined">    var ButtonGroup = document.getElementById("buttonGroup")</span></span><br><span class="line"><span class="undefined">    var EventList = [ </span></span><br><span class="line"><span class="undefined">        "appendChild", </span></span><br><span class="line"><span class="undefined">        "appendParent", </span></span><br><span class="line"><span class="undefined">        "appendPre", </span></span><br><span class="line"><span class="undefined">        "appendNext", </span></span><br><span class="line"><span class="undefined">        "removeEle", </span></span><br><span class="line"><span class="undefined">        "replaceEle" </span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var ButtonArr = []</span></span><br><span class="line"><span class="undefined">    for (var key of EventList) &#123;</span></span><br><span class="line"><span class="undefined">        var btn = document.createElement('button')</span></span><br><span class="line"><span class="undefined">        btn.textContent = key</span></span><br><span class="line"><span class="undefined">        btn.onclick = eval(key)</span></span><br><span class="line"><span class="undefined">        ButtonArr.push(btn)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    for (var b of ButtonArr) &#123;</span></span><br><span class="line"><span class="undefined">        ButtonGroup.appendChild(b)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上代码实现了在各个位置插入元素和元素的删除替换，<a href="https://jsfiddle.net/okbexx/fk42vmpo/" target="_blank" rel="noopener">点击</a>查看运行结果。</p><p>简单实现 v-for、v-text、v-html、v-on 和 v-model 这些功能。<br>好吧，作为一个 Vue.js 爱好者，绕不开的想到了 Vue.js 操作 DOM 的一些功能。这里就试着简单实现下（不涉及 Virtual DOM，只是单纯的 DOM 修改）。<br>如果对 Vue 命令不了解可以去官网看看这些指令的用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Ele<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"messagespan"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>          </span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-on<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"myInput"</span> <span class="attr">v-on:blur</span>=<span class="string">"blur"</span> <span class="attr">v-on:focus</span>=<span class="string">"focus"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-for<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            // v-text</span></span><br><span class="line"><span class="undefined">            var message = "Hello World"</span></span><br><span class="line"><span class="xml">            var messagespan = "<span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span>"</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="undefined">            var spans = document.getElementsByTagName("span")</span></span><br><span class="line"><span class="undefined">            for (var span of spans) &#123;</span></span><br><span class="line"><span class="undefined">                if (span.textContent == "&#123;&#123; message &#125;&#125;") &#123;</span></span><br><span class="line"><span class="undefined">                    span.textContent = message</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            // v-html</span></span><br><span class="line"><span class="undefined">            var container = document.getElementById("container")</span></span><br><span class="line"><span class="undefined">            var divs = container.getElementsByTagName("div")</span></span><br><span class="line"><span class="undefined">            for(var div of divs)&#123;</span></span><br><span class="line"><span class="undefined">                if (div.getAttribute("v-html") == "messagespan") &#123;</span></span><br><span class="line"><span class="undefined">                    div.innerHTML = messagespan</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            // v-model</span></span><br><span class="line"><span class="undefined">            var inputs = container.getElementsByTagName("input")</span></span><br><span class="line"><span class="undefined">            for (var input of inputs) &#123;</span></span><br><span class="line"><span class="undefined">                if (input.getAttribute("v-model") == "message") &#123;</span></span><br><span class="line"><span class="undefined">                    input.setAttribute("value", message)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            // v-on</span></span><br><span class="line"><span class="undefined">            var myInput = document.getElementById("myInput")</span></span><br><span class="line"><span class="undefined">            myInput.onfocus = eval(myInput.getAttribute("v-on:focus"))</span></span><br><span class="line"><span class="undefined">            myInput.onblur = eval(myInput.getAttribute("v-on:blur"))</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            function focus()&#123;</span></span><br><span class="line"><span class="undefined">                myInput.setAttribute("value", "focus")</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            function blur() &#123;</span></span><br><span class="line"><span class="undefined">                myInput.setAttribute("value", "blur")</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            // v-for</span></span><br><span class="line"><span class="undefined">            var liContents = [</span></span><br><span class="line"><span class="undefined">                "jack",</span></span><br><span class="line"><span class="undefined">                "rose",</span></span><br><span class="line"><span class="undefined">                "james",</span></span><br><span class="line"><span class="undefined">                "wade",</span></span><br><span class="line"><span class="undefined">                "jordan"</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var liElementList = []</span></span><br><span class="line"><span class="undefined">            for(var content of liContents) &#123;</span></span><br><span class="line"><span class="undefined">                var li = document.createElement("li")</span></span><br><span class="line"><span class="xml">                li.innerHTML = `<span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>$&#123;content&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">                liElementList.push(li)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            var ul = container.getElementsByTagName("ul")[0]</span></span><br><span class="line"><span class="undefined">            for (var liEle of liElementList) &#123;</span></span><br><span class="line"><span class="undefined">                ul.appendChild(liEle)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击<a href="https://jsfiddle.net/okbexx/vzn9aa2g/" target="_blank" rel="noopener">此处</a>看效果。最后结果如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/05/31/5b0f995aad972.png" alt="显示结果" title="">                </div>                <div class="image-caption">显示结果</div>            </figure></p><p>简单实现了 Vue.js 指令的这些功能，其实在 Vue.js 源码中也是用了这些 dom 操作的 api 来做的。<br>更多 Vue 源码中的 DOM 操作可以看下我的 《Vue.js 源码学习六 —— VNode虚拟DOM学习》这篇文章中。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>无论什么框架，其实都是万变不离其宗。最终都是用最基础的 API 来实现的各种功能。所以学好基础知识是非常重要的~<br>PS：还是 MDN 靠谱，w3school 的资料虽然也挺多，但是感觉不是很靠谱……以后查资料尽量去 MDN 英文网站去查（中文网站翻译有些问题）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;自从用上了框架，就很少直接控制dom的行为，但万变不离其宗，现在重新好好认识一下这个小伙伴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###node、document 和 element&lt;br&gt;在学习 dom api 时对这三者还是挺混乱的。理一
      
    
    </summary>
    
      <category term="dev" scheme="https://okbexx.github.io/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>常用数据集合 API整理</title>
    <link href="https://okbexx.github.io/2018/04/29/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E5%90%88%20API%20%E6%95%B4%E7%90%86/"/>
    <id>https://okbexx.github.io/2018/04/29/常用数据集合 API 整理/</id>
    <published>2018-04-29T14:08:22.000Z</published>
    <updated>2018-05-31T05:44:36.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发时总会经常遇到 Array、Object、Set、Map 这类数据结构，虽然知道有些什么 API，但是每次用总是要查查 MDN 才放心。非常浪费时间，所以这里好好整理下这些数据集合的常用 API。</p></blockquote><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul><li>Array.length 返回数组长度</li><li>Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。传入类似数组对象及map回调方法，返回新数组。</li><li>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。返回修改后的数组（原数组）。</li><li>forEach() 方法对数组的每个元素执行一次提供的函数。</li><li>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。</li><li>includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</li><li>join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</li><li>keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键。</li><li>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。<br>数组操作：</li><li>concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。<br>pop() 方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</li><li>push() 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度。<br>shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</li><li>unshift() 方法将一个或多个元素添加到数组的开头，并返回新数组的长度。</li><li>reverse() 方法将数组中元素的位置颠倒。</li><li>sort() 方法用就地（ in-place ）的算法对数组的元素进行排序，并返回数组。 sort 排序不一定是稳定的。默认排序顺序是根据字符串Unicode码点。会改变原数组，返回排序后的数组。</li><li>splice() 方法通过删除现有元素和/或添加新元素来更改一个数组的内容。可以用于删除也可用于插入数据。返回被删除的元素（集合）。</li><li>slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改。截取内容的范围是 start &lt;= val &lt; end。可以使用 arr.slice() 对数组进行浅拷贝。<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3></li><li>Object.create() 方法创建一个新对象，使用现有的对象来提供新创建的对象的proto。 可以通过 Object.create(null) 创建空对象。</li><li>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</li><li>Object.freeze() 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。</li><li>Object.seal() 方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</li><li>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3></li><li>size 属性将会返回Set对象中元素的个数。</li><li>add() 方法用来向一个 Set 对象的末尾添加一个指定的值。</li><li>clear() 方法用来清空一个 Set 对象中的所有元素。</li><li>delete() 方法可以从一个 Set 对象中删除指定的元素。</li><li>forEach 方法根据集合中元素的顺序，对每个元素都执行提供的 callback 函数一次。</li><li>has() 方法返回一个布尔值来指示对应的值value是否存在Set对象中<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3></li><li>size 可访问属性返回 Map 对象的元素数量。</li><li>get() 方法用来获取一个 Map 对象中指定的元素。如果找不到返回 undefined</li><li>set() 方法为 Map 对象添加一个指定键（key）和值（value）的新元素。</li><li>clear() 方法会移除Map对象中的所有元素。</li><li>delete() 方法用于移除 Map 对象中指定的元素。</li><li>forEach() ?方法将会以插入顺序对 Map 对象中的每一个键值对执行一次参数中提供的回调函数。</li><li>has() 方法返回一个布尔值，用来表明 map 中是否存在指定元素。</li></ul><p>最后<br>先就这些啦~整理出来以免每次用到的时候都去查 MDN （我都查烦了），这种常用的整理出来记在脑子里比较好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发时总会经常遇到 Array、Object、Set、Map 这类数据结构，虽然知道有些什么 API，但是每次用总是要查查 MDN 才放心。非常浪费时间，所以这里好好整理下这些数据集合的常用 API。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="dev" scheme="https://okbexx.github.io/categories/dev/"/>
    
    
  </entry>
  
</feed>
