{"meta":{"title":"真的会爱上你","subtitle":null,"description":null,"author":"Jarl Huang","url":"https://okbexx.github.io"},"pages":[{"title":"categories","date":"2018-01-14T06:46:12.000Z","updated":"2018-01-14T06:46:12.057Z","comments":true,"path":"categories/index.html","permalink":"https://okbexx.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"在VPS中利用vlmcsd搭建KMS激活服务器","slug":"在VPS中利用vlmcsd搭建KMS激活服务器","date":"2018-06-18T04:38:22.000Z","updated":"2018-06-17T16:29:40.797Z","comments":true,"path":"2018/06/18/在VPS中利用vlmcsd搭建KMS激活服务器/","link":"","permalink":"https://okbexx.github.io/2018/06/18/在VPS中利用vlmcsd搭建KMS激活服务器/","excerpt":"","text":"如今我们经常会使用 KMS 对我们的 Windows/Office 进行激活，不过市面上流通着不少良莠不齐的 KMS 激活软件。其实，我们完全可以利用手中的闲置 VPS 资源，利用 vlmcsd 搭建KMS 激活服务器。声明仅 VOL 版本的 Windows/Office 支持此 KMS 激活，请先确认自己安装的非 Retail 零售版。 搭建服务器首先需要一台 VPS，在上面搭建 vlmcsd 服务端 下载最新版，查看最新版本 github地址 1wget https://github.com/Wind4/vlmcsd/releases/download/svn1111/binaries.tar.gz 解压并查看 123tar -zxvf binaries.tar.gzcd binaries/Linux/intel/static/ls 挑选适合自己系统的版本，我们能看到适配各个系统的版本，vlmcsd-x64-musl-static 或vlmcsd-x86-musl-static（根据你 VPS 的系统为 x86 或 x64 系统而定）。 接着以 x64 为例子：12chmod u+x vlmcsd-x64-musl-static./vlmcsd-x64-musl-static 至此，已经部署完毕 如果你的 VPS 开启了 iptables ，记得开启 1688 端口的 tcp 传输： 1iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp --dport 1688 -j ACCEPT 开机自启 12vi /etc/rc.localcd ~/binaries/Linux/intel/static/ &amp;&amp; ./vlmcsd-x64-musl-static 本地测试本地测试这里仅以本地为 Windows 环境为例 下载 https://github.com/Wind4/vlmcsd/releases ，并解压 进入\\binaries\\Windows\\intel 目录，开启 PowerShell 或者其他终端 根据你本地的 Windows 为 x86 或 x64，输入如下命令： 1./vlmcs-Windows-x86.exe -v -l 3 你的VPS的IP或者绑定的域名 或1./vlmcs-Windows-x64.exe -v -l 3 你的VPS的IP或者绑定的域名 其中 -l 3表示发送 Windows 10 Enterprise 2016 LTSB 的激活请求，具体版本对应列表可以通过 ./vlmcs-Windows-x64.exe -x 查看 如果显示如下，那么就搭建成功了。 kms.png 激活 激活 Windows 以管理员身份打开命令提示符，然执行下列命令： 1234cd /d &quot;%SystemRoot%\\system32&quot;slmgr /skms 你的VPS的IP或者绑定的域名slmgr /atoslmgr /xpr win.png 激活 Office 以管理员身份打开命令提示符，进入软件安装目录，然后执行下列命令： 这里以 Office 2013 为例： 进入32位版本安装目录：/d \"%ProgramFiles(x86)%\\Microsoft Office\\Office15 ```12进入64位版本安装目录：``` cd /d &quot;%ProgramFiles%\\Microsoft Office\\Office15 然后执行下列命令 123cscript ospp.vbs /sethst:你的VPS的IP或者绑定的域名cscript ospp.vbs /actcscript ospp.vbs /dstatus 题外话Windows VOL 版本可以从 http://msdn.itellyou.cn/ 这里下载 Office VOL 版本可以从 https://landian.la/click/OfficeToolPlus.html 这里下载 VOL 版本的镜像一般内置 GVLK key，用于 KMS 激活。如果你手动输过其他 key，那么这个内置的 key 就会被替换掉，这个时候如果你想用 KMS，那么就需要把 GVLK key 输回去。首先，到 获取你对应版本的 key 如果不知道自己的系统是什么版本，可以运行以下命令查看系统版本：1wmic os get caption 得到对应key之后，使用管理员权限运行cmd执行安装key：1slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx 然后跟上面说的一样设置 KMS 服务器地址，激活。 KMS 方式激活的有效期只有180天，每隔一段时间系统会自动请求 KMS 服务器续期，只要你的服务器正常，续期就没问题参考： https://luodaoyi.com/kms.htmlhttps://yorkchou.com/vlmcsd.html","categories":[{"name":"dev","slug":"dev","permalink":"https://okbexx.github.io/categories/dev/"}],"tags":[]},{"title":"搭建 IDEA license server 服务器","slug":"搭建 IDEA license server服务器","date":"2018-05-29T14:08:22.000Z","updated":"2018-06-08T14:15:27.630Z","comments":true,"path":"2018/05/29/搭建 IDEA license server服务器/","link":"","permalink":"https://okbexx.github.io/2018/05/29/搭建 IDEA license server服务器/","excerpt":"","text":"前言若资金允许，请点击 https://www.jetbrains.com/idea/buy/ 购买正版 搭建 方法一：使用 nginx 反代 12345server &#123; location /idea/ &#123; proxy_pass http://idea.lanyus.com/; &#125;&#125; 然后使用 https://yourdomain.com/idea/ 即可 方法二：使用反代软件 项目地址 ： https://github.com/ilanyu/ReverseProxy 下载对应系统的二进制文件，下面以 linux-amd64 为例 123wget https://github.com/ilanyu/ReverseProxy/releases/download/v1.2/ReverseProxy_linux_amd64chmod a+x ReverseProxy_linux_amd64./ReverseProxy_linux_amd64 -l &quot;0.0.0.0:8888&quot; -r http://idea.lanyus.com/ 然后使用 http://yourdomain.com:8888 即可 方法三：使用破解补丁 http://idea.lanyus.com/ 激活网址上面地址失效了可以换个试试 http://xidea.online/http://idea.singee77.com/http://idea.lanyus.com/","categories":[{"name":"dev","slug":"dev","permalink":"https://okbexx.github.io/categories/dev/"}],"tags":[]},{"title":"被人忽视的DOM API","slug":"被人忽视的DOM API","date":"2018-05-15T12:08:22.000Z","updated":"2018-05-31T07:19:03.155Z","comments":true,"path":"2018/05/15/被人忽视的DOM API/","link":"","permalink":"https://okbexx.github.io/2018/05/15/被人忽视的DOM API/","excerpt":"","text":"自从用上了框架，就很少直接控制dom的行为，但万变不离其宗，现在重新好好认识一下这个小伙伴。 ###node、document 和 element在学习 dom api 时对这三者还是挺混乱的。理一下他们之间的关系。 nodenode 是一个接口，像 document 和 element 都是继承这个接口的。这个接口提供了 dom 节点的获取和操作方法。node 有许多类型，下图列出了一些 node 的类型码。由图可见 element 的类型码为 1，文本节点类型码为 3，注释节点类型码为 8，document 的类型码为 9。 node_type 这让我想到了 vue.js 中出现多次的代码：if (child.nodeType === 3) { … } 其实就是判断当前节点是否为文本节点。 element从上面的内容可知，element 就是一个特殊的 node（nodeType == 1），其实 element 就是 HTML 各类标签，如 这类有特殊含义的，能够携带一些特殊属性的节点。所以说 element 可以用 node 的所有 api。document同理，document 也是一个特殊的 node，它与 element 的不同之处在于 document 通常是 DOM 节点，即包含有 head 和 body 元素的一个 node。 参考：Difference between Node object and Element object? - Stack Overflow api 学习首先我发现一点：所有 dom 操作的起点都是使用 document 去获取各种类型的 node （集合）然后再去执行各类 dom 操作的行为！由于 document 操作的 api 真的很多，所以我选取我想了解的部分学习了。在这里我学习 DOM API 的目的是： 学习 document 对象操作 dom 的方式，拥有脱离框架（jquery、vue等）来操作 dom 的能力。 获取节点 Document.documentElement 返回 document 的直属后代元素。 Document.activeElement 返回当前正在操作的元素 Document.body 返回当前文档的&lt;body&gt;元素。与此类似的还有 Document.head 和Document.scripts 两个属性返回当前文档的 &lt;head&gt; 和 &lt;script&gt; 元素。 Document.getElementByClassName() 返回有给定样式名的元素列表 Document.getElementByTagName() 返回有给定标签名的元素列表 document.getElementById() 返回一个对识别元素的对象引用 document.querySelector() 返回文档中第一个匹配指定选择器的元素 document.querySelectorAll() 返回一个匹配指定选择器的元素节点列表 Node.childNodes 返回一个包含了该节点所有子节点的实时的 NodeList 是“实时的”意思是，如果该节点的子节点发生了变化，NodeList 对象就会自动更新。 Node.firstChild &amp; Node.lastChild 返回该节点的第一个子节点或最后一个子节点，如果该节点没有子节点则返回 null。 Node.previousSibling &amp; Node.nextSibling 返回与该节点同级的上一个或下一个节点，如果没有返回null。 Node.ownerDocument 返回这个元素属于的 Document 对象 。 Node.parentNode 返回一个当前结点 Node 的父节点 。 Node.parentElement 返回一个当前节点的父节点 Element。 操作节点 Document.createDocumentFragment() 创建一个新的文档片段 Document.createComment() 创建一个新的注释节点并返回它 Document.createElement() 用给定的标签名创建一个新的元素。 Document.createTextNode() 创建一个文字节点 Document.write() 向文档中写入内容（与之有类似功能的是 Document.writeln() 不同之处在于后面多了个换行符。） Element.innerHTML 设置或返回元素的内容 Node.textContent 获取或设置一个标签内所有子结点及其后代的文本内容。 Node.appendChild() 向元素添加新的子节点，作为最后一个子节点。 Node.cloneNode() 克隆元素（方法中传参为deep，如果deep为true则深拷贝。）Node.insertBefore() 在指定已有节点前插入新节点（没有 insertAfter 方法。可以使用 insertBefore 方法和 nextSibling 来模拟它。） Node.normalize() 合并元素中相邻文本节点 Node.removeChild() 从元素中移除子节点 Node.replaceChild() 替换元素中的子节点其中 Document 的 createXXX 方法还有一些其他不常用的，如需使用请查阅 MDN。 其他常用属性和方法 Element.classList 返回元素的 class 集合。 EventTaget.addEventListener() 注册监听事件 Node.nodeType 返回该节点的类型码 Node.nodeValue 返回或设置当前节点的值。 Node.compareDocumentPosition() 比较当前节点与任意文档中的另一个节点的位置关系。 Node.contains() 传入的节点是否为该节点的后代节点。 Node.hasChildNodes() 是否拥有子节点 Node.isEqualNode() 检查两个元素是否相等 Node.isSameNode() 检查两个元素是否为相同的节点 以上内容均参考了 MDN 上的内容： Node https://developer.mozilla.org/zh-CN/docs/Web/API/Node Element https://developer.mozilla.org/zh-CN/docs/Web/API/Element Document https://developer.mozilla.org/zh-CN/docs/Web/API/Document 写个操作 DOM 的例子接下来就使用这些 API 来进行一些 DOM操作。 获取各个位置的节点。这里写了个小demo：1234567891011121314151617&lt;div&gt;&lt;div id=\"container\"&gt; &lt;div&gt; &lt;h1&gt;get dom&lt;/h1&gt; &lt;ul id=\"list\"&gt; &lt;li&gt;&lt;span&gt;hello world 1&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;hello world 2&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;hello world 3&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;hello world 4&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;hello world 5&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;br/&gt; &lt;div&gt; &lt;button&gt;commit&lt;/button&gt; &lt;/div&gt;&lt;/div&gt; 12345678910111213141516171819202122232425262728&lt;script&gt; var container = document.getElementById('container') console.log('列出所有node', container.childNodes) var h1 = document.getElementsByTagName('h1')[0] console.log('获取h1后的元素', h1.nextSibling) var uldiv = container.firstChild while (uldiv &amp;&amp; uldiv.nodeType != 1) &#123; uldiv = uldiv.nextSibling &#125; var ul = uldiv.lastChild while (ul &amp;&amp; ul.nodeType == 3) &#123; ul = ul.previousSibling &#125; console.log('获取ul中第一个元素内容', ul.firstChild) var doc = h1.ownerDocument console.log('获取当前 Document 对象', doc) var li1 = ul.firstChild console.log('获取li的父级节点', li1.parentElement) var button = document.getElementsByTagName(\"button\")[0] button.onclick = log button.focus() button.click() console.log('获取正在操作的元素', document.activeElement) function log()&#123; console.log('button is clicked') &#125;&lt;/script&gt; 由于在 chrome 中空格、换行算是文本节点。所以获取最后元素的时候总是会获取到那些文本节点上去。这个要注意的。所以我在代码中使用 nodeType == 1 来区分是否为元素。在上面例子中查找了各种关系的元素，解决日常元素获取问题应该不难了。 实践创建node、插入node和删除node。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;div&gt; &lt;div id=\"container\"&gt; &lt;h2 id=\"child\"&gt;Hello Child&lt;/h2&gt; &lt;/div&gt; &lt;br/&gt; &lt;div id=\"buttonGroup\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt; // 父节点向子节点插入元素 function appendChild()&#123; var container = document.getElementById(\"container\") var text = document.createElement(\"h2\") text.textContent = 'Hello New Child' container.appendChild(text) &#125; // 子节点获取父节点，在父节点后插入元素 function appendParent()&#123; var child = document.getElementById('child') var parent = child.parentElement var text = document.createElement(\"h1\") text.textContent = 'Hello Parent' var root = parent.parentElement root.insertBefore(text, parent.nextSibling) &#125; // 在当前元素前插入元素 function appendPre()&#123; var child = document.getElementById('child') var text = document.createElement(\"h2\") text.textContent = 'Hello Pre Child' child.parentElement.insertBefore(text, child) &#125; // 在当前元素后插入元素 function appendNext()&#123; var child = document.getElementById('child') var text = document.createElement(\"h2\") text.textContent = 'Hello Next Child' child.parentElement.insertBefore(text, child.nextSibling) &#125; // 移除父元素中最后一个子元素 function removeEle()&#123; var container = document.getElementById('container') if (container.lastChild) &#123; container.removeChild(container.lastChild) &#125; &#125; // 替换父元素中的子元素 function replaceEle()&#123; var child = document.getElementById(\"child\") var newNode = document.createElement('div') newNode.innerHTML = \"&lt;button&gt;button&lt;/button&gt;hello new node replaced\" var parent = child.parentElement parent.replaceChild(newNode, child) &#125; // 创建按钮组 var ButtonGroup = document.getElementById(\"buttonGroup\") var EventList = [ \"appendChild\", \"appendParent\", \"appendPre\", \"appendNext\", \"removeEle\", \"replaceEle\" ] var ButtonArr = [] for (var key of EventList) &#123; var btn = document.createElement('button') btn.textContent = key btn.onclick = eval(key) ButtonArr.push(btn) &#125; for (var b of ButtonArr) &#123; ButtonGroup.appendChild(b) &#125;&lt;/script&gt; 以上代码实现了在各个位置插入元素和元素的删除替换，点击查看运行结果。 简单实现 v-for、v-text、v-html、v-on 和 v-model 这些功能。好吧，作为一个 Vue.js 爱好者，绕不开的想到了 Vue.js 操作 DOM 的一些功能。这里就试着简单实现下（不涉及 Virtual DOM，只是单纯的 DOM 修改）。如果对 Vue 命令不了解可以去官网看看这些指令的用法。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Hello Ele&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;h1&gt;v-text&lt;/h1&gt; &lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt; &lt;h1&gt;v-html&lt;/h1&gt; &lt;div v-html=\"messagespan\"&gt;&lt;/div&gt; &lt;h1&gt;v-model&lt;/h1&gt; &lt;input v-model=\"message\"/&gt; &lt;h1&gt;v-on&lt;/h1&gt; &lt;input id=\"myInput\" v-on:blur=\"blur\" v-on:focus=\"focus\"/&gt; &lt;h1&gt;v-for&lt;/h1&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/div&gt; &lt;script&gt; // v-text var message = \"Hello World\" var messagespan = \"&lt;span&gt;Hello World&lt;/span&gt;\" var spans = document.getElementsByTagName(\"span\") for (var span of spans) &#123; if (span.textContent == \"&#123;&#123; message &#125;&#125;\") &#123; span.textContent = message &#125; &#125; // v-html var container = document.getElementById(\"container\") var divs = container.getElementsByTagName(\"div\") for(var div of divs)&#123; if (div.getAttribute(\"v-html\") == \"messagespan\") &#123; div.innerHTML = messagespan &#125; &#125; // v-model var inputs = container.getElementsByTagName(\"input\") for (var input of inputs) &#123; if (input.getAttribute(\"v-model\") == \"message\") &#123; input.setAttribute(\"value\", message) &#125; &#125; // v-on var myInput = document.getElementById(\"myInput\") myInput.onfocus = eval(myInput.getAttribute(\"v-on:focus\")) myInput.onblur = eval(myInput.getAttribute(\"v-on:blur\")) function focus()&#123; myInput.setAttribute(\"value\", \"focus\") &#125; function blur() &#123; myInput.setAttribute(\"value\", \"blur\") &#125; // v-for var liContents = [ \"jack\", \"rose\", \"james\", \"wade\", \"jordan\" ] var liElementList = [] for(var content of liContents) &#123; var li = document.createElement(\"li\") li.innerHTML = `&lt;label&gt;&lt;input type=\"checkbox\"/&gt;&lt;span&gt;$&#123;content&#125;&lt;/span&gt;&lt;/label&gt;` liElementList.push(li) &#125; var ul = container.getElementsByTagName(\"ul\")[0] for (var liEle of liElementList) &#123; ul.appendChild(liEle) &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 点击此处看效果。最后结果如图： 显示结果 简单实现了 Vue.js 指令的这些功能，其实在 Vue.js 源码中也是用了这些 dom 操作的 api 来做的。更多 Vue 源码中的 DOM 操作可以看下我的 《Vue.js 源码学习六 —— VNode虚拟DOM学习》这篇文章中。 最后无论什么框架，其实都是万变不离其宗。最终都是用最基础的 API 来实现的各种功能。所以学好基础知识是非常重要的~PS：还是 MDN 靠谱，w3school 的资料虽然也挺多，但是感觉不是很靠谱……以后查资料尽量去 MDN 英文网站去查（中文网站翻译有些问题）。","categories":[{"name":"dev","slug":"dev","permalink":"https://okbexx.github.io/categories/dev/"}],"tags":[]},{"title":"常用数据集合 API整理","slug":"常用数据集合 API 整理","date":"2018-04-29T14:08:22.000Z","updated":"2018-05-31T05:44:36.349Z","comments":true,"path":"2018/04/29/常用数据集合 API 整理/","link":"","permalink":"https://okbexx.github.io/2018/04/29/常用数据集合 API 整理/","excerpt":"","text":"开发时总会经常遇到 Array、Object、Set、Map 这类数据结构，虽然知道有些什么 API，但是每次用总是要查查 MDN 才放心。非常浪费时间，所以这里好好整理下这些数据集合的常用 API。 Array Array.length 返回数组长度 Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。传入类似数组对象及map回调方法，返回新数组。 fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。返回修改后的数组（原数组）。 forEach() 方法对数组的每个元素执行一次提供的函数。 reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。 includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。 join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。 keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键。 map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。数组操作： concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。pop() 方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。 push() 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度。shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。 unshift() 方法将一个或多个元素添加到数组的开头，并返回新数组的长度。 reverse() 方法将数组中元素的位置颠倒。 sort() 方法用就地（ in-place ）的算法对数组的元素进行排序，并返回数组。 sort 排序不一定是稳定的。默认排序顺序是根据字符串Unicode码点。会改变原数组，返回排序后的数组。 splice() 方法通过删除现有元素和/或添加新元素来更改一个数组的内容。可以用于删除也可用于插入数据。返回被删除的元素（集合）。 slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改。截取内容的范围是 start &lt;= val &lt; end。可以使用 arr.slice() 对数组进行浅拷贝。Object Object.create() 方法创建一个新对象，使用现有的对象来提供新创建的对象的proto。 可以通过 Object.create(null) 创建空对象。 Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。 Object.freeze() 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。 Object.seal() 方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。 Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。Set size 属性将会返回Set对象中元素的个数。 add() 方法用来向一个 Set 对象的末尾添加一个指定的值。 clear() 方法用来清空一个 Set 对象中的所有元素。 delete() 方法可以从一个 Set 对象中删除指定的元素。 forEach 方法根据集合中元素的顺序，对每个元素都执行提供的 callback 函数一次。 has() 方法返回一个布尔值来指示对应的值value是否存在Set对象中Map size 可访问属性返回 Map 对象的元素数量。 get() 方法用来获取一个 Map 对象中指定的元素。如果找不到返回 undefined set() 方法为 Map 对象添加一个指定键（key）和值（value）的新元素。 clear() 方法会移除Map对象中的所有元素。 delete() 方法用于移除 Map 对象中指定的元素。 forEach() ?方法将会以插入顺序对 Map 对象中的每一个键值对执行一次参数中提供的回调函数。 has() 方法返回一个布尔值，用来表明 map 中是否存在指定元素。 最后先就这些啦~整理出来以免每次用到的时候都去查 MDN （我都查烦了），这种常用的整理出来记在脑子里比较好。","categories":[{"name":"dev","slug":"dev","permalink":"https://okbexx.github.io/categories/dev/"}],"tags":[]}]}