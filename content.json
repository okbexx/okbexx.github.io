{"meta":{"title":"真的会爱上你","subtitle":null,"description":null,"author":"Jarl Huang","url":"https://okbexx.github.io"},"pages":[{"title":"categories","date":"2018-01-14T06:46:12.000Z","updated":"2018-01-14T06:46:12.057Z","comments":true,"path":"categories/index.html","permalink":"https://okbexx.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"css世界实用例子.md","slug":"css世界实用例子-md","date":"2018-02-22T14:27:36.000Z","updated":"2018-02-22T14:27:36.053Z","comments":true,"path":"2018/02/22/css世界实用例子-md/","link":"","permalink":"https://okbexx.github.io/2018/02/22/css世界实用例子-md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"css世界4-6","slug":"css世界4-6","date":"2018-01-29T14:08:22.000Z","updated":"2018-02-04T12:49:06.710Z","comments":true,"path":"2018/01/29/css世界4-6/","link":"","permalink":"https://okbexx.github.io/2018/01/29/css世界4-6/","excerpt":"","text":"4盒尺寸四大家族4.1深入理解content4.1.1content和替换元素1.什么是替换元素替换元素就是通过修改属性值，呈现的内容就可以被修改的就是替换元素，例如img,select,video,iframe,textarea替换元素有自己的一套规则，例如1.很难通过css修改其样式，2.有自己的默认尺寸，video,iframe一般为300*150，img为0，3.css规则运用在替换元素上与非替换元素可能不同，如vertical-align 2.替换元素的默认display值替换元素都是内联元素，但是display不一样 3.替换元素的尺寸计算规则替换元素的尺寸有3种：1.元素本身的尺寸，2.在标签中添加的尺寸，3.在css中添加的尺寸。优先级3&gt;2&gt;1如果1有宽高比例，则仅设置宽度或高度，元素依然会按照原来的比例展示开发中我们为了提高加载性能以及节约宽带费用，首屏以下的图片就会通过滚屏加载的方式异步加载，通常使用一张透明的图片占位 &lt;img src=&quot;transparent.png&quot;&gt; 实际上这是多余的，我们可以这样 html: &lt;img&gt; css: img{visibility:hidden} img[src]{visibility:visible} 这是最高效的实现方式。我们无法改变替换元素的固有尺寸，css3中的object-fit可以改变。 4.替换元素和非替换元素的距离有多远观点1：替换元素没有src就是一个类似span的东西针对上面的代码，如果我们的javascript加载比较慢，我们的页面就很有可能出现一块一块的图片区域，纯白色，无任何信息，我们可以这样 img::after{ content:attr(alt); position: absolute; bottom: 0; width: 100%; background-color: rgba(0,0,0,5); transform: translateY(100%); transition: transform .2s } img:hover::after { transform: translateY(0) } 于是很巧妙地增强了图片还没加载时的信息展示体验观点2：img {content:url()}的效果和的效果一样。所以我们可以使用更改content属性把src置换掉所以非替换元素使用content就变成替换元素，拥有替换元素的特点。 4.1.2content内容生成器暂时略 4.2温和的padding属性padding属性最温和，很少出现意想不到的情况 4.2.1 padding与元素的尺寸默认设置padding值会改变元素的尺寸，这时候大部分人的选择是使用全局box-sizing:border-box，但是如果padding值足够大，那么width也无能为力。所以尽量采用无宽度以及宽度分离准则实现才是好的解决之道padding作用在块状元素和内联元素是不一样的。总的说就是，padding属性作用在内联元素时，对水平产生影响，对垂直方向会直接压过下面的元素padding元素。具体请看4-2-1demopadding可以优雅得增加链接或button的点击范围。在我们写登陆注册中间的管道符时，往往是使用符号|，但是符号并不好进行控制，此时我们可以借助内联元素以及padding解决，具体看4-2-2demopadding还可以作用在内联元素，解决通过地址栏的hash值铀点html id的时候想距离顶部50px。因为此时如果在块级元素设置padding会影响布局，所以设置在内联元素上 4.2.2 padding的百分比值块级元素来说，padding元素的百分比值是根据宽度来算的！所以设置padding为10% 50%，即可以实现头部图片随着屏幕大小不断变化依然保持着10%的高度内联元素来说，比较复杂，会断行，就是随着内联元素的换行而有不同的变化。 4.2.3 标签元素内置的padding许多元素都有内置padding,当元素出现不可预估的padding时，应考虑清除内置padding,重新计算。正因有内置的行为，许多浏览器的表现形式不一样，例如button，chrome、IE、Firefix的高度都不一样，所以我们可以这样，即固定了高度，又保留了button的功能 button { position: absolute; clip: rect(0 0 0 0); } label { display: inline-block; line-height: 20px; padding: 10px; } &lt;button id=&quot;btn&quot; onclick=&quot;go()&quot;&gt;&lt;/button&gt; &lt;label for=&quot;btn&quot;&gt;按钮&lt;/label&gt; &lt;script&gt; function go() { console.log(&apos;go&apos;) } &lt;/script&gt; 4.2.4 padding与图形绘制具体看demo显示的两个效果 4.3激进的margin","categories":[{"name":"book","slug":"book","permalink":"https://okbexx.github.io/categories/book/"}],"tags":[]},{"title":"css世界 1-3","slug":"css世界1-3","date":"2018-01-26T14:51:54.000Z","updated":"2018-01-30T15:29:01.975Z","comments":true,"path":"2018/01/26/css世界1-3/","link":"","permalink":"https://okbexx.github.io/2018/01/26/css世界1-3/","excerpt":"","text":"1概述1.1在css世界中，html是魔法石，选择器是选择法器，css属性是魔法师，css各种属性值就是魔法师的魔法技能,浏览器就是王国 总结：魔法师（css）使用选择法器（选择器）对着魔法石（html）使用魔法技能（css属性值），从而构建出王国样貌里的一小部分。众多魔法师一起合作，便能构建出王国最终的样子。 1.2css世界的诞生就是为图文信息展示服务的 1.3SVG的强项图形,然而在以前网站的主要功能都是图片和文字信息的展示，所以SVG被CSS压制了10年，到最近技术得到了发展，网站需要更加复杂和丰富多彩的展示，所以SVG又重新火起来总结：CSS为什么在图文展示那么强？因为流的存在 1.3.1流就是css世界中引导元素排列和定位的一条看不见的“水流”，例如，水会自动铺满，div会铺满，木块（inline-block）会随着水位升高在左侧依次排列 1.3.2如果只用流的特性，那么css世界只会呈现W3C那样的文档网页， 所以我们在进行特殊布局时要破坏流 1.3.3流体布局，就是利用流的特性进行布局 ###1.4CSS世界的开启从IE8开启 ###1.5略 1.6CSS3的来到，让移动端崛起，视觉表现长足进步，但本书围绕CSS2，并不会太深入CSS3 2需提前了解的术语和概念2.1 需了解的术语.vocabulary{ height: 99px; color: transparent; } 1.属性-&gt; height,color 2.值-&gt; 99px 3.关键字-&gt;transparent,常见的还有solid,inherit，所有属性都可以使用的称为泛关键字，如inherit 4.变量-&gt;内容较少，不详述，如CSS3中的currentColor，有兴趣可自行了解 5.长度单位-&gt; px 6.功能符号-&gt; 如rgba(),url(),jsla() 7.属性值，可以理解为多个值+功能符+关键字 8.声明-&gt;height: 99px; 9.声明快-&gt;{这里} 10.规则或规则集-&gt;上述代码块就是规则集 11.选择器-&gt;(类选择器.xxx，ID选择器#xxx，属性选择器[attribution]，伪类选择器:firstchild，伪元素选择器::before)伪类选择器和伪元素选择器的区别 12.关系选择器-&gt;空格、&gt;、~、 13.@规则 2.2当某个浏览器出现和其他浏览器不一样的行为或样式表现的时候，称为未定义行为 3流、元素与基本尺寸3.1 块级元素块级元素与display：block不是一个概念，如li默认的display:list-item,table默认的display:table，但是他们都是块级元素，因为它们符合块级元素的特征:水平流上只能单独显示，多个块级元素则要换行这里请查看3-1-1demo了解块级元素在浮动元素中的应用 3.1.1 盒子容器：值为inline-block的元素右外在的内联盒子和内在的块级盒子组成 3.1.2 3.1.3 width/height作用在内在盒子 3.23.2.1width:auto有4种表现（1）.充分利用空间，如div宽度默认100%父容器（2）.inline-block的收缩到合适（3）.收缩到最小，中文能断则断（4）.父容器设置了宽度，但本身width为auto,当父元素设置了内容不换行后，本身内容会直接无视父级元素的限制 具体看3-2-2demo 外部尺寸就是width/heigth设置在外在盒子，不然的话大小始终是100%父容器，内部尺寸就是如果不设置大小的话大小由内容大小决定 1.外部尺寸与流体特性（1）正常流宽度外部尺寸也就是大小由外在盒子决定，例如div，其它都是由内在盒子决定本来a是width:auto，宽度会借助流的特性在父元素展示，但设置width:100%，意味着本身宽度与父容器一样，此时再加上padding就会马上大于父容器的宽度，从而突破破容器的限制，具体看3-2-3demo (2) 格式化宽度absolute fixed在进行定位时，同时设置left、right属性时，宽度会自动调整 2.内部尺寸与流体特性（1）包裹性内部尺寸的元素，就是内容多大，这个元素就多大，内容在超过父容器宽度时会自动换行，也造成内部尺寸的大小受父容器的限制，其实不然，如果内容设置不换行，内部尺寸的元素大小还是不受父容器限制包裹性应用文字少的时候文字居中显示，多的时候换行靠左。因为P设置了inline-block，所以最大宽度不会超过容器，而当文字会自动换行，所以会看起来靠左。具体看demo （2）首选最小宽度上面例子中，当容器宽度为0时，p的宽度为文字的宽度，这就是最小宽度最小宽度应用3-2-6 （3）最大宽度内部尺寸元素的最大宽度由不换行的内联元素决定 3.2.2 width值作用的细节width和height值设置在content box上的，而在content box外还有padding box,border box 3.2.3 略3.2.4 改变width/height作用细节的box-sizing3.2.6 关于height:100%如果父容器没有设置高度，那么子元素设置height:100%是无效的，就算父容器塞满了东西并展现出高度，这时应该 html,body{ height:100% } 便可以解决,另一种方式是设置absolute，但此时100%是根据父元素的padding box计算的，而没有设置absolute的100%是根据父元素的content box计算，具体看demo 3.3 minWidth/maxWidth3.3.1 为流体而生的min-width/max-width场景：在不知道图片大小是否超过用户屏幕时，使用maxwidth:100%,再设置height:auto，那么图片宽度最大为屏幕宽度，而高度会根据原有比例自动缩放。 3.3.2 与众不同的初始值max-width/max-height的初始值为none，min-width/max-height的初始值为auto 3.3.3 超越!important max-width会覆盖width，就算width使用了!important min-width的值比max-width的值还大时，这时候min-width会活下来，这就是超越最大 3.3.4 maxheight的应用在过渡效果中 .element{ height:0; overflow:hidden; transition:height .25s } .element.active{ height:auto } 这样是没有过渡效果的，这时应该应用max-height .element{ max-height:0; overflow:hidden; transition:height .25s } .element.active{ max-height:666px; } 3.4 内联元素外在盒子表现为内联盒子的都是内联元素，如inline-block,inline &lt;p&gt;这是一行普通的文字，这里有个&lt;em&gt;em&lt;/em&gt;标签。&lt;/p&gt; 上面一段Html,有下面几个概念：(1) 内容区域-&gt;包裹文字的区域，就是你用鼠标把文字括起来的区域(2) 内联盒子-&gt;每一个外在盒子表现为inline的元素(3) 行框盒子-&gt;多个内联盒子组成行框盒子(4) 包含盒子-&gt;上面一整段html 每个行框盒子前面都有一个占据一定高度的空白节点，称之为幽灵节点","categories":[{"name":"book","slug":"book","permalink":"https://okbexx.github.io/categories/book/"}],"tags":[]},{"title":"vue2.0常用收集","slug":"vue2-0常用收集","date":"2018-01-26T14:51:17.000Z","updated":"2018-04-09T00:44:23.839Z","comments":true,"path":"2018/01/26/vue2-0常用收集/","link":"","permalink":"https://okbexx.github.io/2018/01/26/vue2-0常用收集/","excerpt":"","text":"class的使用1. :class=&quot;{xxx:boolean,xxx:boolean}&quot; 2. :class=&quot;{xxx}&quot; data(){ return { xxx:{ className:boolean } } } 3. :class&quot;[dataname,dataname]&quot; data(){ return { dataname:&apos;classname&apos; } } 4. :class&quot;[]&quot; storeaction使用配置 new Vuex.store({ actions: { xxx(context|{commit}){ } } })使用1. this.$store.dispatch(‘xxx’) 2. import { mapActions } from &apos;vuex&apos; ...mapActions({ add: &apos;xxx&apos; // this.add()相当于 this.$store.dispatch(&apos;xxx&apos;) }) routerrouter配置import vuerouter from ‘vuerouter’vue.use(vuerouter)const routes = [ { path: ‘/foo’, component: Foo }, { path: ‘/bar’, component: Bar }]const router = new VueRouter({ routes // （缩写）相当于 routes: routes})在vue实例用添加router 跳转 router.push(…) 添加插件以插件方式引入router index.js文件中定义常量install（方法） vue.install的时候会执行 初始化路由函数中vue.use(router) export导出install和router,router是个对象 main.js中导入,vue.use使用，并在vue实例中引用router vuexstorenew Vuex.Store({ state:{} mutations:{} actions:{}}) state this.$store.state.xxx import {mapState} from ‘vuex’ mapState()就是省略了this.$store，并且返回一个对象 computed: { …mapState([‘isLogin’,’messageCount’])}isLogin就是直接用在dom中的变量 template1.不会渲染，可抽取if for show以及事件放到template上面，减少div标签过长等情况，结构更加清晰2.配合使用，比如 就是把item传入进template中 mixins如果想要在一个组件中直接使用已经写好的方法或者拿去数据，则可以使用Mixin也叫混入import loadMore from ‘./load-more.vue’; export default{}mixins:[loadMore] 定义过滤器 创建过滤器方法，导出xxx 创建插件install,vue.filter(‘xxx’,xxx) main.js vue.use watch‘params.memCode’: function (val) { console.log(val); }监听对象中的属性","categories":[],"tags":[]},{"title":"前端清障记录 长期更新","slug":"前端清障记录-md","date":"2018-01-20T16:08:51.000Z","updated":"2018-03-23T03:22:46.831Z","comments":true,"path":"2018/01/21/前端清障记录-md/","link":"","permalink":"https://okbexx.github.io/2018/01/21/前端清障记录-md/","excerpt":"","text":"这里记录这本人在前端学习过程中以及项目过程中所遇到比较复杂的问题（个人认为）的解决办法，如有更好办法请提出，在此感谢。 margin合并冲突####水平垂直 内联元素水平居中方式 inline-block+父元素text-align center 父flex just-content center内联元素垂直居中方式 父flex align-item center块状元素水平居中方式 父relative子absolute left50% transform transilateX-50% 父flex just-content center块状元素垂直居中方式 父display table-cell vertical-align center 父relative子absolute top50% transform transilatey-50%内联块状元素水平垂直居中 父relative子absolute left50% top50% transform tranplate(-50%,-50%) 父display table-cell vertical-align text-align 子inline-block flex+justify-content+align-items 多列布局 左float width marginright 右overflow hidden vux初始化报错npm install –global –production windows-build-tools –registry=https://registry.npm.taobao.orgnpm install node-gyp -g若之前已安装node-gyp，请重装 更新npmnpm cache clean -fnpm install npm -g 重装node-gypnpm uninstall node-gyp -gnpm uninstall node-gypnpm install node-gyp -g vue与cordova结合cordova在vue项目中，修改vue项目中的config文件夹index.js，使输出的内容到cordova项目中的www即可操作步骤 npm install(vue) npm build(vue) cordova build android(cordova) as中运行 宽高DOM对象clientwidth，clientheight（整体内容不包括border-滚动条）offsetwidth, offsetheight（整体内容包括border）clienttop，clientleft（边框的宽高）offsetleft，offsettop（当前元素相对最近的具有定位的元素的距离）scrollheight,scrollwidth（具有滚动条时的宽高）scrolltop,scrollright（不包含border距离最上部的距离）element.scrollHeight - element.scrollTop === element.clientHeight （用于判断是否到底） event对象clientX和clientY（相对浏览器的距离，不包括滚动条）screenX和screenY（相对屏幕的距离）offsetX和offsetY（相对触发事件元素本身的距离）pageX和pageY（相对页面的距离，包括滚动条）","categories":[{"name":"front","slug":"front","permalink":"https://okbexx.github.io/categories/front/"}],"tags":[]},{"title":"Hello","slug":"hello-world","date":"2018-01-02T15:26:27.019Z","updated":"2018-07-13T12:46:25.000Z","comments":true,"path":"2018/01/02/hello-world/","link":"","permalink":"https://okbexx.github.io/2018/01/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}